=====================================

Clean Code C++

Peter Loos

30+ Jahre: Entwicklung (C/C++)

Schulung: C/C++, C#, Java, JavaScript ( Python )

Joel

=====================================

2 Tools:

a) Visual Studio

b) Github:  

Themen:

== Erwartungen

== Lücken 

== Was MUSS drin sein

Überblick // Struktur  

Gut strukturierter Code // Wartbar

Modernes C++ mit Strukturierung

Nebenziel: Legacy-Code einbinden.

=======================================

Todo-Liste:

auto : Check

Lambda !!!  : Check

Unit-Test: Catch2 : Check

Funktionale Programmierung: Wenn die Zeit reicht:  std::ranges

C++ 20: Modul-Technik (Node.js // Python)

Multithreading

=======================================

STL Container: std::vector, std::array, std::span    : halber Check

STL Algorithmen: std::fill, std::find, ... std::copy, ...     : Check

std::weak_ptr  // std::shared_ptr // std::unique_ptr  : Check

std::unique_ptr  // get()  raw Pointer  : Check

explicit  : Check

RAII  <======

std::variant, std::optional, std::tuple, std::pair

std::is_same, std::is_integral ... Datentypen ...

Structured Binding  : Check

Range-based for–Loop  : Check

std::string, std::string_view  : Check

constexpr <======

SOLID: Guidelines  : Check

Entwurfsmuster: Adapter // Observer // Visitor    : Check

Strong Typing  <======


=======================================

Was ist ein Interface ???

C#, Java:   interface

C#:

interface IEnumerator
{
    bool MoveNext();
    void Reset();
}

Was tut ein Interface ???

a) Es definiert Methoden.
b) KEINE Implementierung.
c) Ein Interface kann von einer oder mehreren Klassen
   realisiert / implementiert werden.



=======================================================

Kopierkonstruktor:

Nicht alles kann man kopieren "im echten Leben":   Socket, SqlConnection, 

struct ICloneable   als Interface

Wozu ???

class A : public ICloneable        ===> Aha, A kann man kopieren 

class B {}                         ===> Oh, B kann man NICHT kopieren.


=======================================================

Clean Code:

Je mehr private, desto weniger Möglichkeiten, eine Variable zu verändern

Go for private.

=======================================================

Verschieben ist das Gegenteil von Kopieren.

Was ist schlecht am Kopieren von Objekten ????   Kosten ZEIT

Wir wollen KOPIEN vermeiden 

a) RValue

b) Wie

==============================================

class A {};

==:    A a;   a ist ein OBJEKT  // Original

==:    A& ra = a;    ra ist eine Referenz (Adresse)  // LVALUE Referenz

      Auch: Eine Referenz ist ein ALIAS
            eines vorhandenen Objekts mit Namen

Ab C++ 11:

Es gibt eine zweite Art von Referenz: Eine für temporäre Objekte/Variablen,
                                      für Objekte OHNE Namen


A&& ra = a+b;

Diese heißen RVAlUE Referenz.

Zur Namensgebung:

a = b;

a ist links, ich brauche die ADRESSE: L Value

b ist rechts, ich brauche den WERT (auch die Adresse), R VALUE

=========================================

Links:

https://github.com/pelocpp/cpp_modern

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/MoveSemantics/MoveSemantics.md

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/RValueLValue/RValueLValue.md

=========================================

Move-Semantik: Why ??????????????

std::vector: Ist wie ein Array, nur ohne FESTE Länge.

(( Zur Laufzeit mir realloc oder ähnliches vergrößert ))

In einem Vektor ist eine bestimmte Anzahl von PLätzen verfügbar:

DICHT ANEIANDERLIEGEND.

Wenn kein Platz mehr vorhanden ist:

Es wird ein NEUER Platz gesucht - aus Optimierungsgründen:

Neue Länge = Alte Länge * 1.5;

std::vector:

a) Dynamische Längenanpassung

b) Mit RESERVE kann man eine erwartete Länge vorgeben

   ==> Weniger UMKOPIEREN

c) mit shrink_to_fit kann man den reservierten Speicher (Capacity)
   an die tatsächliche Länge anpassen.

========================================

Verschiebe-Semantik:

:--:  ...720     Tmp. Objekt am Stack  // Wird freigegeben
:--:  ...1E0     Objekt im Vektor // via Kopier-Konstruktor

Neu-Konzeption: Verbessert: Verschiebe-Semantik // Move-Semantik

:--:  ...130     Tmp. Objekt am Stack 


FAZIT:

Mit der Move-Semantik (ab C++ 11)
können überflüssige Kopien VERMIEDEN werden.

Link:

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/MoveSemantics/MoveSemantics.md

Rule-of-Five(Six)

Rule-of-ZERO

==============================================================

Brace-Initialization     // Geschweifte Klammern

Uniform-Initialization   // Einheitliche Initialisierung

{}

{} ===> Null-Wert


Recap:

Für Strukturen ist - Clean Code - eine sichere Vorgehensweise
in der Initialisierung:

A) Alle Member mit {}
B) Standard-Konstruktor = default; schreiben,
   so dass Felder und einzelne Objekte mit dem Standard-Konstruktor gehen.

==============================================================

auto

Go for "auto"

Vorsicht bei Referenz und vermeidbaren KOPIEN.

Verlust von Referenz und const bei auto:

=================================================

Lambda

Vorspann:  Aufrufbares Objekt  // Callable

Was bringen mir aufrufbare Objekte:

Man braucht 'intern' immer wieder Hilfsmethoden:
Welchen Namen haben diese ????????????
Geht in C++ einfach: KEINEN, man nehme statt dessen den operator()

Lambda

Umgangssprachlich:  "Lambda-Funktion"

Exakt: Lamda-Objekt

Beschreibung:

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/Lambda/Lambda.md

=====================================================================

Cpp Insights:

https://cppinsights.io/

=====================================================================

Unit Testing

Catch 2

=====================================================================

std::shared_ptr

Problem: Er funktioniert nicht immer !!!!!!!!!!!!!!!!!!

Link:

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/WeakPtr/WeakPtr.md

a) Wie funktioniert der std::weak_ptr

b) WARUM ???? Clean Code

Observer - Pattern:  // Beobachter

A) Es gibt ein Objekt mit ZUSTAND, der sich ändert.
   Wenn der Zustand sich ändert, müssen die Client-Objekte benachrichtigt werden.

B) Es gibt Client-Objekte, die das ZUSTANDS-Objekt beobachten wollen.

===================================================================

Fazit:

std::shared_ptr

std::weak_ptr

Visualisierung:

Bauteile: std::shared_ptr

Visualisierung: Will Bauteile zeichnen // darstellen // UI

    std::shared_ptr oder std::weak_ptr

a) std::shared_ptr

b) std::weak_ptr:   lock geht oder geht NICHT (empty // nullptr)


Fazit: Je mehr std::weak_ptr, desto besser:  Temporärer Besitzer

                                             KEin ECHTER Besitzer.


============================================================

Container:

Dictionary:

Menge von Key / Value Paaren  // Schlüssel / Wert Paaren:

A) Telefonbuch:

   Key:     std::string // "Hans"
   Value:   int         // 123345

A) Wörterbuch:

   Key:     std::string    // "Haus"
   Value:   std::string    // "house"


Zugriff:  Mit Key: Über den Key bekommen wir den Wert zurück.

C++:  std::unordered_map !!! NICHT: std::map


=====================================================================

STL:  Algorithmen

Einfachere Dinge:  Vorbelegen, Container durchlaufen (traversieren), Suchen,
                   Kopieren ...

Clean Code:  ===>  Go - for - STL Algorithmen

=====================================================================


Call-by-Value versus Call-by-Reference:

Macht das einen Unterschied ???????????????????


                // TEST: Call-by-Value                    [] (int i) {  
                int m = i;
00007FF60BB33A75  mov         eax,dword ptr [i]  
00007FF60BB33A7B  mov         dword ptr [m],eax  


                // TEST: Call-by-Reference                [] (int& i) {
                int m = i;
00007FF71D8C3A76  mov         rax,qword ptr [i]  
00007FF71D8C3A7D  mov         eax,dword ptr [rax]  
00007FF71D8C3A7F  mov         dword ptr [m],eax  

Fazit: 

a) ELEMENTARE Variablen:  Call- by-Value // Kopie

b) Objekte/Strukturen:    Call- by-Referenz // Adresse

==================================================

Clean Code:

Container und Algorithmen:

Sind getestet.
Sind performant.

DRY:Don'T repeat yourself


====================================================

STL:

        std::transform(
            source.begin(),
            source.end(),
            std::back_inserter(target),   // push_back
            [](const auto& entry) {       // Lambda: Umwandlung // Transformation
                return std::stod(entry);
            }
        );

        std::for_each(
            target.begin(),
            target.end(),
            [](auto n) { std::print("{} ", n); }
        );

Die STL hat eine gewisse Stilistik:

Programmieren in "Buiding Blocks"  // Bausteinen.

Reduktion der Funktionalität auf das Ausfüllen // Erstellen von Lambdas.

Frage zu std::String und Alignment:

std::max_alignof

std::String  "da sind ein paar Sachen mit abgespeichert" :)   SSO

Small-String Optimization

=========================================================

Zum schnellen TEsten:

Online-Compiler:

Wandbox.org

==========================================================

Clean Code:   std::string

Allgemein:

Wo legt std::string seine Zeichenkette ab ???

Am HEAP    ==> new ==> Performanz

(( Ausnahme: kurze Zeichenketten ))

Frage: 


std::string s { "Dies ist eine lange Zeichenkette" };

"Lokaler Windows Debugger"   == Heap.

Soll // muss diese Zeichenkette am Heap liegen ???????

Frage: 

const char* s = "Lokaler Windows Debugger";

Wo liegt diese Zeichenkette ???

NICHT AM HEAP.

Möglicherweise:

https://en.wikipedia.org/wiki/File:Program_memory_layout.pdf

bss, data oder text.

Geht das auch in / mit C++:   std::string_view

Was ist ein std::string_view:

A) Anfangsadresse: const char* s
B) Die Länge (kein strlen ..)

==============================================

Clean Code:

Go for explicit

==============================================

Entwurfsmuster:
===============

Clean Code

Gebrauchsanweisungen // Erfahrung

Anwenden.

== Observer
== Adapter

Link:

https://github.com/pelocpp/cpp_design_patterns/blob/master/Patterns/Observer/Resources/Readme.md

Pattern:

So genanntes "Conceptual Example".

Dieses wird häufig durch eine Testfunktion "clientCode" getriggered.

==============================================

Nachricht:  

XML

JSON

==============================================

Entwurfsmuster // Entwurfsprinzip

SOLID

"Inversion of Dependency"

Das ist simpel, wenn wir darüber reden.

Rad ist da auch nicht neu erfunden:

Lose Kopplung // Enge Kopplung: SCHLECHT.


Konflikt: Zeit versus besseres Design / besseres Konzept

===========================================================

RAII

https://github.com/pelocpp/cpp_design_patterns/blob/master/Patterns/RAII_Idiom/Resources/Readme.md



Idee:

((  Smart Pointer ))   new // delete

Resources:

Socket
SqlConnection
Mutex
FILE

Werden versteckt in einer Hüllen-Klasse:
Objekt  ==> Konstruktor  :  Open // Attach
        ==> Destruktor: Close // detach // Release   // DETERMINISTISCH

==> Open // Attach
==> Close // detach // Release

Noch ein Beispiel:

std::mutex mtx;

Beispiel:

mtx.lock();
// kritische Anweisungen  // nur von einem Thread aus aufgerufen werden können
// break;  // throw 
mtx.unlock();

C++ Clean Code: std::mutex NICHT verwenden.

Besser:

{
    std::lock_guard<std::mutex> raii (mtx);  // Konstruktor: mtx.lock();

    // kritische Anweisungen  // nur von einem Thread aus aufgerufen werden können
    // break;  // throw 

}   <== Destruktor // mtx.unlock();

{
     ScopedTimer watch{};  // Logger::startWatch();


}
   // ~ScopedTimer() {
   //     Logger::stopWatchMilli(std::cout);
   // }

// ==============================================

Strong Types:

Hmmm, häufig verwenden wir den Typ 'int' für Sachen wie:

Alter einer Person:  m_age  18 ... 70   <== realen Werte

Viele Optionen, dies sicher zustellen:

int m_age;   // private

getter / setter:

Idee:  Nope, kein int verwenden:  "Strong Type": Klasse 

============================================================

constexpr:

Gerade für Embedded interessant :)

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/ConstExpr/Constexpr.md











